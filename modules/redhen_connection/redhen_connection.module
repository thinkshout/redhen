<?php

/**
 * @file
 * Contains redhen_connection.module..
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\redhen_connection\ConnectionInterface;
use Drupal\redhen_connection\Entity\ConnectionType;
use Drupal\redhen_connection\Access\ConnectionAccessResult;

/**
 * Denotes that the Connection is not active.
 */
const REDHEN_CONNECTION_INACTIVE = 0;

/**
 * Denotes that the Connection is active.
 */
const REDHEN_CONNECTION_ACTIVE = 1;


/**
 * Specifies the number of endpoint fields we ship with.
 */
const REDHEN_CONNECTION_ENDPOINTS = 2;

/**
 * Implements hook_help().
 */
function redhen_connection_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the redhen_connection module.
    case 'help.page.redhen_connection':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Defines the base connection entity and features.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function redhen_connection_theme() {
  $theme = [];
  $theme['redhen_connection'] = [
    'render element' => 'elements',
    'file' => 'redhen_connection.page.inc',
    'template' => 'redhen_connection',
  ];
  $theme['redhen_connection_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL, 'entity' => NULL],
    'file' => 'redhen_connection.page.inc',
  ];
  return $theme;
}

/**
 * Return an associative array of Connection types to be used as an options list.
 *
 * @return array
 *   Keyed by name with a label value.
 */
function redhen_connection_type_options_list() {
  $options = [];
  foreach (ConnectionType::loadMultiple() as $type) {
    $options[$type->id()] = $type->label();
  }

  return $options;
}

/**
 * Implements hook_entity_access().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @param String $operation
 * @param \Drupal\Core\Session\AccountInterface $account
 *
 * @return mixed
 */
function redhen_connection_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if (in_array($entity->getEntityTypeId(), ['redhen_contact', 'redhen_org'])){
    // Only check/grant access to active contacts and orgs.
    if ($entity->isActive()) {
      return ConnectionAccessResult::allowedIfHasConnectionPermission($entity, $account, $operation);
    }
  }

  if ($entity->getEntityTypeId() == 'redhen_connection' && $entity->isActive()) {
    // Allow access to a connection via indirectly connected redhen_contact
    // entity if the contact associated with the current user is connected to
    // the indirectly connected contact.

    // Get redhen_contact endpoint fields from the connection type.
    $connection_type = ConnectionType::load($entity->bundle());
    $contact_endpoint_fields = $connection_type->getEndpointFields('redhen_contact');
    // Loop over contact fields and get the indirectly connected contact entity.
    foreach ($contact_endpoint_fields as $contact_endpoint_field) {
      $contact = $entity->get($contact_endpoint_field)->entity;
      // If we get a contact, check if the contact associated with the current
      // user is connected to it, is active and has access.
      if ($contact && $contact->isActive()) {
        // @todo - add connection type to this call so we don't allow access if
        // any connection type allows the passed operation - will require
        // updating the function to take the additional parameter
        return ConnectionAccessResult::allowedIfHasConnectionPermission($contact, $account, $operation);
      }
    }
  }
  return ConnectionAccessResult::neutral();
}

/**
 * Implements hook_entity_update().
 * @todo replace with event dispatcher/subscribers.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function redhen_connection_entity_update(EntityInterface $entity) {
  // When updating contacts and orgs, check if they've been made inactive and
  // set their associated connections to inactive.
  if (in_array($entity->getEntityTypeId(), ['redhen_contact', 'redhen_org']) &&
    (\Drupal::config('redhen_connection.settings')->get('auto_disable_connections') == TRUE)) {
    $original = $entity->original;
    if (!$entity->isActive() && $original->isActive()) {
      // Get active connections for this entity.
      $connections = \Drupal::service('redhen_connection.connections')->getConnections($entity, NULL, NULL, TRUE);
      foreach ($connections as $connection) {
        /** @var ConnectionInterface $connection */
        $connection->setActive(FALSE);
        $connection->save();
      }
    }
  }
}

/**
 * Implements hook_entity_delete().
 * @todo replace with event dispatcher/subscribers.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function redhen_connection_entity_delete(EntityInterface $entity) {
  // When deleting contacts and orgs, also delete their connections.
  if (in_array($entity->getEntityTypeId(), ['redhen_contact', 'redhen_org'])) {
    $connections = \Drupal::service('redhen_connection.connections')->getConnections($entity, NULL, NULL, FALSE);
    foreach ($connections as $connection) {
      /** @var ConnectionInterface $connection */
      $connection->delete();
    }
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function redhen_connection_entity_type_alter(array &$entity_types) {
  // There's no good way to add a link template based on existing mapping
  // definitions while we're building entity type definitions. We can't load
  // existing mappings, because to do that we need to load entity types which
  // creates an infinite recursion. So, we set the link template on any
  // mappable entity, and hide it for any entity types that don't have
  // mappings.
  foreach ($entity_types as $entity_type_id => $entity_type) {
    if ($entity_type->hasViewBuilderClass() && $entity_type->hasLinkTemplate('canonical')) {
      $entity_type->setLinkTemplate('redhen_connection', "/$entity_type_id/{{$entity_type_id}}/redhen-connections");
    }
  }
}

/**
 * Extracts the entity for the current redhen_connection route.
 *
 * @return null|\Drupal\Core\Entity\EntityInterface
 *   Entity type id.
 */
function redhen_connection_get_connection_entity_from_route() {
  foreach (\Drupal::routeMatch()->getParameters() as $param) {
    if ($param instanceof EntityInterface) {
      if ($param->getEntityTypeId() !== 'redhen_connection_type') {
        return $param;
      }
    }
  }
  return NULL;
}
